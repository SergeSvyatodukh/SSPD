import numpy as np
import matplotlib.pyplot as plt
import os

from scipy.optimize import curve_fit

def sigmoid(x, L, x0, k, b):
    y = L / (1 + np.exp(-k*(x-x0))) + b
    return (y)

# add through internet connection
batch = 972
file_dir = 'C:\\Users\\serge\\Downloads\\' + str(batch)           # Path to file
wavelength = 1550
fig, axs = plt.subplots(nrows=3, ncols=3, figsize=(30, 18), frameon=True)
fig.suptitle('Batch number: ' + str(batch), fontsize=30)

file_list = os.listdir(file_dir)

# dark current files
file_dc = []
for file in file_list:
    if file.find('dc') != -1:
        a = file.find('dc')
        file_ID = file[:a-1]
        file_dc.append([file, file_ID])
    else:
        pass

# read data from dc files
ID_list = []
bar_list = []
Ic_list = []
bar = []

for file_d in file_dc:
    # Data initialization
    dc = np.loadtxt(file_dir + '\\' + file_d[0])

    ID = file_d[1]      # File ID
    a = ID.find('#')
    b = ID[a:].find('_')
    ID_list.append(ID)


    current_dc = dc[3:len(dc)-2,0]  # Read column from file with current (x axis)
    counts_dc = dc[3:len(dc)-2,1]   # Read column from file with dc_cps (y axis)

    # Ic search
    Ic = current_dc[len(current_dc) - 1]
    Ic_list.append(Ic)

    # Plotting
    bar_list.append(axs[0, 2].bar(ID[:a+b], Ic))
    axs[0, 2].set_title('Critical current vs ID')
    axs[0, 2].tick_params(axis='x', rotation=0, labelsize=6)

    axs[0,0].scatter(current_dc, counts_dc)
    axs[0,0].set_title('DC current vs ID')

    axs[0, 1].scatter(current_dc/Ic, counts_dc)
    axs[0, 1].set_title('DC norm current vs ID')

    file_d.append(Ic)

axs[0,0].legend(ID_list, fontsize=6)
axs[0,1].legend(ID_list, fontsize=6)

for bar in bar_list:
    axs[0,2].bar_label(bar, fmt='%.1f', label_type='center')
print(file_dc)
# 650 nm current files
file_light = []

# Sigmoid fit of selected functions

for file in file_list:
    if file.find(str(wavelength)) != -1:

        a = file.find(str(wavelength))
        file_ID = file[:a-1]
        file_light.append([file, file_ID])
    else:
        pass

####
ID_list = []
ID_QE_list = []
ID_QE_list_ = []
bar_list_1 = []
bar_list_2 = []
detection_current_list = []
detection_current_counts_threashold = 100
for file_l in file_light:
    for file in file_dc:
        if file[1] == file_l[1]:
            file_l.append(file[2])
        else:
            pass

    print('light=', file_light)
    light_650 = np.loadtxt(file_dir + '\\' + file_l[0])

    ID = file_l[1]  # File ID
    ID_list.append(ID)

    #if ID in ID_list:
    #    break
    #Else:
    #

    current_l = light_650[3:len(light_650)-2,0]   # Read column from file with current (x axis)
    counts_l = light_650[3:len(light_650)-2, 1]    # Read column from file with dc_cps (y axis)

    i = np.where(current_l == 0)
    current_l = np.delete(current_l, i)
    counts_l = np.delete(counts_l, i)

    n = -1
    while True:
        n += 1
        if counts_l[n] >= detection_current_counts_threashold:
            detection_current = current_l[n]
            detection_current_list.append(detection_current)
            print(current_l[n])
            break
        else:
            pass

    print(file_l)
    ### data filtration Ic = file_l[2] ###
    n = -1
    a = file_l[2]*0.90
    print('Ic=', a, 'ID=', ID)
    while True:
        n += 1
        if current_l[n] <= a:
            #print(current_l[n])
            pass
        else:
            break
    current_l = current_l[:n]
    counts_l = counts_l[:n]

    a, c = np.unique(current_l, return_counts=True)
    dup_index = np.where(c > 1)[0]

    current_l = a
    counts_l = np.delete(counts_l, dup_index)

    if len(counts_l) < 3:
        pass
    else:
        a = ID.find('#')
        b = ID[a:].find('_')

        current_l_norm = current_l / max(current_l)
        counts_l_norm = counts_l / max(counts_l)

        try:
            p0 = [max(counts_l_norm), np.median(current_l_norm), 3, min(counts_l_norm)]
            popt, vcov = curve_fit(sigmoid, current_l_norm, counts_l_norm, p0, method='dogbox')
            x_range = np.linspace(current_l_norm[0], 2, 100)
            saturation_value = max(sigmoid(x_range, *popt))

            axs[2,0].plot(x_range, sigmoid(x_range, *popt))
            axs[2,0].scatter(current_l_norm, counts_l_norm)
            axs[2,0].set_title('Sigmoidal fit of cps vs current, lambda=' + str(wavelength))
            #axs[2,0].scatter(popt[1], sigmoid((popt[1]), *popt))
            ID_QE_list.append(ID + '_sigm_fit')
            ID_QE_list.append(ID)
            #ID_QE_list.append('Inflection point of ' + ID[:a+b])

            axs[2,1].plot(x_range, sigmoid(x_range, *popt)/saturation_value)
            axs[2,1].scatter(current_l_norm, counts_l_norm/saturation_value)
            axs[2,1].set_title('Re-norm sigmoidal fit of cps vs current, lambda=' + str(wavelength))
            ID_QE_list_.append(ID + '_sigm_fit')
            ID_QE_list_.append(ID)

            bar_list_2.append(axs[2,2].bar(ID[:a + b], sigmoid(current_l_norm[-1], *popt)/saturation_value))
            axs[2, 2].set_title('IQE, lambda=' + str(wavelength))
            axs[2,2].tick_params(axis='x', rotation=0, labelsize=8)
        except RuntimeError:
            pass

        bar_list_1.append(axs[1, 2].bar(ID[:a + b], detection_current))
        axs[1, 2].set_title('Detection current vs ID, lambda=' + str(wavelength))
        axs[1, 2].tick_params(axis='x', rotation=0, labelsize=8)

        axs[1, 1].scatter(current_l_norm, counts_l_norm)
        axs[1, 1].set_title('Norm light current vs cps, lambda=' + str(wavelength))

        axs[1, 0].scatter(current_l, counts_l)
        axs[1, 0].set_title('Light current vs cps, lambda=' + str(wavelength))



axs[1,0].legend(ID_list, fontsize=6)
axs[1,1].legend(ID_list,  fontsize=6)
axs[2,0].legend(ID_QE_list,  fontsize=6, loc='lower right')
axs[2,1].legend(ID_QE_list_,  fontsize=6, loc='lower right')


for bar in bar_list_1:
    axs[1,2].bar_label(bar, fmt='%.1f', label_type='center')

for bar in bar_list_2:
    axs[2,2].bar_label(bar, fmt='%.2f', label_type='center')

plt.show()
